# -*- coding: utf-8 -*-
"""numpytd1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1urK1SAAnJiYy5LaKtdGsfVkZ2HXuImnT
"""



#Exercise 1: Creating and Manipulating NumPy Arrays
import numpy as np
import matplotlib.pyplot as plt
import time

# Création d'un tableau 1D et conversion en float64
array_1d = np.array([5, 10, 15, 20, 25], dtype=np.float64)
print("Tableau 1D :", array_1d)

# Création d'un tableau 2D
array_2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print("Tableau 2D :\n", array_2d)

# Affichage de la forme et de la taille du tableau 2Ds
print("Taille du tableau 2D :", array_2d.size)

# Création d'un tableau 3D avec des valeurs aléatoires
array_3d = np.random.rand(2, 3, 4)
print("Tableau 3D :\n", array_3d)

# Affichage du nombre de dimensions et de la forme du tableau 3D
print("Nombre de dimensions du tableau 3D :", array_3d.ndim)
print("Forme du tableau 3D :", array_3d.shape)

#Exercise 2: Advanced Array Manipulations

# Tableau 1D inversé
array_1d = np.arange(10)[::-1]
print("Tableau 1D inversé:", array_1d)

# Tableau 2D de 0 à 11 (3x4)
array_2d = np.arange(12).reshape(3, 4)
print("Tableau 2D:\n", array_2d)

# Extraction des deux premières lignes et deux dernières colonnes
subarray_2d = array_2d[:2, -2:]
print("Sous-tableau extrait:\n", subarray_2d)

# Tableau 5x5 avec des nombres aléatoires entre 0 et 10
array_5x5 = np.random.randint(0, 11, (5, 5))
print("Tableau 5x5 original:\n", array_5x5)

# Remplacement des valeurs > 5 par 0
array_5x5[array_5x5 > 5] = 0
print("Tableau 5x5 modifié:\n", array_5x5)

#Exercise 4: Fancy Indexing and Masking


# Tableau 1D avec 20 entiers aléatoires entre 0 et 50
array_1d = np.random.randint(0, 51, 20)
print("Tableau 1D :", array_1d)

# Extraction des éléments aux indices donnés
extracted_elements = array_1d[[2, 5, 7, 10, 15]]
print("Éléments extraits :", extracted_elements)

# Tableau 2D (4x5) avec des entiers aléatoires entre 0 et 30
array_2d = np.random.randint(0, 31, (4, 5))
print("Tableau 2D :\n", array_2d)

# Sélection des valeurs > 15
elements_greater_than_15 = array_2d[array_2d > 15]
print("Éléments > 15 :", elements_greater_than_15)

# Tableau 1D avec 10 entiers entre -10 et 10
array_neg = np.random.randint(-10, 11, 10)
print("Tableau avec valeurs négatives :", array_neg)

# Remplacement des négatifs par 0
array_neg[array_neg < 0] = 0
print("Tableau modifié :", array_neg)

#Exercise 3: Array Initialization and Attributes


# Matrice identité 3x3
identity_matrix = np.eye(3)
print("Matrice identité :\n", identity_matrix)

# Attributs de la matrice
print("Nombre de dimensions :", identity_matrix.ndim)
print("Forme :", identity_matrix.shape)
print("Taille totale :", identity_matrix.size)
print("Taille d'un élément (octets) :", identity_matrix.itemsize)
print("Taille totale (octets) :", identity_matrix.nbytes)

# Tableau de 10 nombres espacés entre 0 et 5
linspace_array = np.linspace(0, 5, 10)
print("Tableau linéairement espacé :", linspace_array)
print("Type de données :", linspace_array.dtype)

# Tableau 3D (2,3,4) avec des valeurs de distribution normale
array_3d = np.random.randn(2, 3, 4)
print("Tableau 3D :\n", array_3d)

# Somme de tous les éléments du tableau 3D
print("Somme des éléments du tableau 3D :", np.sum(array_3d))

#Exercise 5: Combining and Splitting Arrays

#  Création de deux tableaux 1D avec des entiers aléatoires entre 0 et 10
array1 = np.random.randint(0, 11, 5)
array2 = np.random.randint(0, 11, 5)

# Concaténation des deux tableaux
concatenated_array = np.concatenate((array1, array2))
print("Tableau concaténé :", concatenated_array)

# Création d'un tableau 2D (6,4) avec des entiers aléatoires entre 0 et 10
array_2d = np.random.randint(0, 11, (6, 4))

# Découpage en deux parties selon les lignes
split_2d = np.array_split(array_2d, 2, axis=0)

print("\nPremière partie du tableau 2D :\n", split_2d[0])
print("\nDeuxième partie du tableau 2D :\n", split_2d[1])

# Création d'un tableau 2D (3,6) avec des entiers aléatoires entre 0 et 10
array_2d_col = np.random.randint(0, 11, (3, 6))

# Découpage en trois parties selon les colonnes
split_2d_col = np.array_split(array_2d_col, 3, axis=1)

print("\nPremière partie du tableau 2D (colonnes) :\n", split_2d_col[0])
print("\nDeuxième partie du tableau 2D (colonnes) :\n", split_2d_col[1])
print("\nTroisième partie du tableau 2D (colonnes) :\n", split_2d_col[2])

#Exercise 6: Mathematical Functions and Aggregations

# Création d'un tableau 1D de taille 15 avec des nombres entre 1 et 100
array_1d = np.random.randint(1, 101, 15)

# Calcul des statistiques
print("Tableau 1D :", array_1d)
print("Moyenne :", np.mean(array_1d))
print("Médiane :", np.median(array_1d))
print("Écart-type :", np.std(array_1d))
print("Variance :", np.var(array_1d))

# Création d'un tableau 2D (4x4) avec des nombres entre 1 et 50
array_2d = np.random.randint(1, 51, (4, 4))

# Calcul des sommes par ligne et colonne
print("\nTableau 2D :\n", array_2d)
print("Somme des lignes :", np.sum(array_2d, axis=1))
print("Somme des colonnes :", np.sum(array_2d, axis=0))

# Création d'un tableau 3D (2x3x4) avec des nombres entre 1 et 20
array_3d = np.random.randint(1, 21, (2, 3, 4))

# Recherche des max et min selon les axes
print("\nTableau 3D :\n", array_3d)
print("Max par axe 0 :\n", np.max(array_3d, axis=0))
print("Min par axe 0 :\n", np.min(array_3d, axis=0))
print("Max par axe 1 :\n", np.max(array_3d, axis=1))
print("Min par axe 1 :\n", np.min(array_3d, axis=1))
print("Max par axe 2 :\n", np.max(array_3d, axis=2))
print("Min par axe 2 :\n", np.min(array_3d, axis=2))

# Exercise 7: Reshaping and Transposing Arrays

# Création d'un tableau 1D avec les nombres de 1 à 12
array_1d = np.arange(1, 13)

# Reshape en 2D (3,4)
array_2d = array_1d.reshape(3, 4)
print("Tableau 2D après reshape :\n", array_2d)

# Création d'un tableau 2D (3x4) avec des nombres entre 1 et 10
array_random_2d = np.random.randint(1, 11, (3, 4))

# Transposition du tableau
array_transposed = array_random_2d.T
print("\nTableau 2D original :\n", array_random_2d)
print("Tableau transposé :\n", array_transposed)

# Création d'un tableau 2D (2x3) avec des nombres entre 1 et 10
array_2d_small = np.random.randint(1, 11, (2, 3))

# Aplatir le tableau en 1D
array_flattened = array_2d_small.flatten()
print("\nTableau 2D original :\n", array_2d_small)
print("Tableau aplati :\n", array_flattened)

#Exercise 8: Broadcasting and Vectorized Operations
# Créer un tableau 2D de taille (3, 4) avec des entiers aléatoires entre 1 et 10
arr_2d = np.random.randint(1, 11, (3, 4))
print("Tableau original:")
print(arr_2d)

# Calculer la moyenne de chaque colonne et la soustraire aux éléments de la colonne
column_mean = arr_2d.mean(axis=0)
normalized_arr = arr_2d - column_mean
print("Tableau après soustraction de la moyenne de chaque colonne:")
print(normalized_arr)

# Créer deux tableaux 1D de longueur 4 avec des entiers aléatoires entre 1 et 5
arr1 = np.random.randint(1, 6, 4)
arr2 = np.random.randint(1, 6, 4)
print("Tableaux 1D:", arr1, arr2)

# Produit externe des deux tableaux
outer_product = np.outer(arr1, arr2)
print("Produit externe des tableaux:")
print(outer_product)

# Créer un tableau 2D de taille (4, 5) avec des entiers entre 1 et 10
arr_2d_large = np.random.randint(1, 11, (4, 5))
print("Tableau original:")
print(arr_2d_large)

# Ajouter 10 aux éléments > 5
arr_2d_large[arr_2d_large > 5] += 10
print("Tableau après modification:")
print(arr_2d_large)

#Exercise 9: Sorting and Searching Arrays

# Créer un tableau 1D avec des entiers entre 1 et 20 (taille 10), puis le trier
arr_1d = np.random.randint(1, 21, 10)
print("Tableau original:", arr_1d)
sorted_arr = np.sort(arr_1d)
print("Tableau trié:", sorted_arr)

# Créer un tableau 2D de taille (3, 5) avec des entiers entre 1 et 50
arr_2d_sort = np.random.randint(1, 51, (3, 5))
print("Tableau original:")
print(arr_2d_sort)

# Trier par la deuxième colonne (colonne d'index 1)
sorted_by_column = arr_2d_sort[arr_2d_sort[:, 1].argsort()]
print("Tableau trié par la deuxième colonne:")
print(sorted_by_column)

# Trouver les indices des éléments > 50 dans un tableau 1D
arr_1d_large = np.random.randint(1, 101, 15)
print("Tableau original:", arr_1d_large)
indices = np.where(arr_1d_large > 50)[0]
print("Indices des éléments > 50:", indices)

# Exercise 10: Linear Algebra with NumPy

# Créer un tableau 2D (2,2) et calculer son déterminant
arr_square = np.random.randint(1, 11, (2, 2))
print("Matrice 2x2:")
print(arr_square)
det = np.linalg.det(arr_square)
print("Déterminant de la matrice:", det)

#  Créer une matrice (3,3) et calculer ses valeurs propres et vecteurs propres
arr_square_3 = np.random.randint(1, 6, (3, 3))
print("Matrice 3x3:")
print(arr_square_3)
eigenvalues, eigenvectors = np.linalg.eig(arr_square_3)
print("Valeurs propres:", eigenvalues)
print("Vecteurs propres:")
print(eigenvectors)

# Produit matriciel entre deux matrices de tailles (2,3) et (3,2)
matrix1 = np.random.randint(1, 11, (2, 3))
matrix2 = np.random.randint(1, 11, (3, 2))
print("Matrice 1:")
print(matrix1)
print("Matrice 2:")
print(matrix2)

# Calcul du produit matriciel
matrix_product = np.dot(matrix1, matrix2)
print("Produit matriciel:")
print(matrix_product)

# Exercise 11: Random Sampling and Distributions

# Générer un tableau 1D de 10 échantillons d'une distribution uniforme
uniform_samples = np.random.uniform(0, 1, 10)
print("Échantillons uniformes:", uniform_samples)

# Générer un tableau 2D (3,3) avec une distribution normale
normal_samples = np.random.normal(0, 1, (3, 3))
print("Échantillons normaux:")
print(normal_samples)

# Générer un histogramme d'un tableau 1D d'entiers aléatoires entre 1 et 100
hist_samples = np.random.randint(1, 101, 20)
plt.hist(hist_samples, bins=5)
plt.show()

# Exercise 12: Advanced Indexing and Selection

# Sélectionner la diagonale d'une matrice (5,5)
arr_diag = np.random.randint(1, 21, (5, 5))
print("Matrice:")
print(arr_diag)
print("Diagonale:", np.diag(arr_diag))

# Sélectionner les nombres premiers dans un tableau 1D
arr_prime = np.random.randint(1, 51, 10)
print("Tableau original:", arr_prime)
primes = arr_prime[np.vectorize(lambda x: all(x % np.arange(2, x) != 0) if x > 1 else False)(arr_prime)]
print("Nombres premiers:", primes)

# Exercise 13: Handling Missing Data

 # Introduire np.nan dans un tableau 1D
arr_nan = np.random.randint(1, 11, 10).astype(float)
arr_nan[np.random.choice(10, 2, replace=False)] = np.nan
print("Tableau avec NaN:", arr_nan)

# Remplacer les valeurs < 5 par np.nan
arr_replace = np.random.randint(1, 11, (3, 4)).astype(float)
arr_replace[arr_replace < 5] = np.nan
print("Tableau après remplacement:")
print(arr_replace)

# Trouver les indices des np.nan
temp_arr = np.random.randint(1, 21, 15).astype(float)
temp_arr[np.random.choice(15, 3, replace=False)] = np.nan
print("Indices des NaN:", np.where(np.isnan(temp_arr))[0])

# Exercice 14: Exercise 14: Performance Optimization with NumPy

# Créer un grand tableau 1D et mesurer le temps de calcul des statistiques
large_arr = np.random.randint(1, 101, 1000000)
start_time = time.time()
mean_value = np.mean(large_arr)
std_dev = np.std(large_arr)
end_time = time.time()
print(f"Moyenne: {mean_value}, Écart-type: {std_dev}, Temps pris: {end_time - start_time:.5f} sec")

# Opérations sur deux grandes matrices 2D
mat1 = np.random.randint(1, 11, (1000, 1000))
mat2 = np.random.randint(1, 11, (1000, 1000))
start_time = time.time()
sum_matrix = mat1 + mat2
end_time = time.time()
print(f"Addition élément par élément temps pris: {end_time - start_time:.5f} sec")

# Somme d'un tableau 3D selon les axes
large_3d = np.random.randint(1, 11, (100, 100, 100))
start_time = time.time()
sum_axis_0 = np.sum(large_3d, axis=0)
sum_axis_1 = np.sum(large_3d, axis=1)
sum_axis_2 = np.sum(large_3d, axis=2)
end_time = time.time()
print(f"Somme selon chaque axe, Temps pris: {end_time - start_time:.5f} sec")

# Exercise 15: Cumulative and Aggregate Functions

# Somme et produit cumulatif
arr_cumulative = np.arange(1, 11)
print("Somme cumulative:", np.cumsum(arr_cumulative))
print("Produit cumulatif:", np.cumprod(arr_cumulative))

# Somme cumulative sur lignes et colonnes
arr_2d_cum = np.random.randint(1, 21, (4, 4))
print("Somme cumulative par ligne:", np.cumsum(arr_2d_cum, axis=1))
print("Somme cumulative par colonne:", np.cumsum(arr_2d_cum, axis=0))

# Valeurs min, max et somme d'un tableau 1D
arr_agg = np.random.randint(1, 51, 10)
print("Min:", np.min(arr_agg), "Max:", np.max(arr_agg), "Somme:", np.sum(arr_agg))

#Exercise 16: Working with Dates and Times

# Tableau de 10 dates à partir d'aujourd'hui
dates_daily = np.arange(np.datetime64('today'), np.datetime64('today') + 10)
print("Dates quotidiennes:", dates_daily)

# Tableau de 5 dates à partir du 1er janvier 2022 avec une fréquence mensuelle
dates_monthly = np.arange('2022-01', '2022-06', dtype='datetime64[M]')
print("Dates mensuelles:", dates_monthly)

# Conversion des timestamps en datetime64
timestamps = np.random.randint(1672531200, 1675123200, 10)  # Timestamps aléatoires en 2023
datetime_array = timestamps.astype('datetime64[s]')
print("Timestamps convertis:", datetime_array)

#Exercise 17: Creating Arrays with Custom Data Types

# Tableau 1D avec un type personnalisé pour stocker des entiers et leur représentation binaire
dtype_bin = np.dtype([('integer', np.int32), ('binary', 'U10')])
binary_array = np.array([(i, bin(i)[2:]) for i in np.random.randint(1, 100, 5)], dtype=dtype_bin)
print("Tableau d'entiers avec représentation binaire:")
print(binary_array)

# Tableau 2D (3x3) avec des nombres complexes
dtype_complex = np.complex128
complex_array = np.random.rand(3, 3) + 1j * np.random.rand(3, 3)
print("Tableau de nombres complexes:")
print(complex_array)

# Tableau structuré pour stocker des informations sur des livres
dtype_books = np.dtype([('title', 'U20'), ('author', 'U20'), ('pages', np.int32)])
books = np.array([
    ('Book A', 'Author X', 250),
    ('Book B', 'Author Y', 300),
    ('Book C', 'Author Z', 150)
], dtype=dtype_books)
print("Tableau structuré pour les livres:")
print(books)